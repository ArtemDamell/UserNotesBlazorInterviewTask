@page "/"

@inject INoteService _noteService
@inject AuthenticationStateProvider _authState

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="row border border-info rounded align-items-center">
            <div class="col">
                <h1 class="text-info">Notes Dashboard</h1>
            </div>
            <div class="col text-end">
                <button class="btn btn-primary text-uppercase" @onclick="(() => OpenModalHandler(CRUDState.Create))">Create note</button>
            </div>
        </div>
        <div class="row py-4 align-items-center">
            <div class="col-10">
                <input class="form-control" @bind-value="searchCondition" placeholder="Type some search condition here ..." />
            </div>
            <div class="col-2">
                <button class="btn btn-primary text-uppercase form-control" @onclick="(() => SearchHandler(searchCondition))"><span class="oi oi-magnifying-glass"></span></button>
            </div>
        </div>

        @if (resultMessage is not null)
        {
            <div class="row mt-3">
                <div class="alert alert-@((resultMessage.State == MessageState.Success) ? "success" : "danger") alert-dismissible fade show" role="alert">
                    @resultMessage.MessageText
                    @{
                        resultMessage = null;
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        }

        <div class="row mt-3">
            @if (filteredListForView is not null && filteredListForView.Any())
            {
                <div class="sticker">
                    <ul class="text-center mb-5">
                        @foreach (var item in filteredListForView)
                        {
                            <li>
                                <h2>@item.Title.GetShortDescription(100, false)</h2>
                                <p>@item.Body.GetShortDescription(200)</p>
                                <div class="text-center">
                                    <small>Created: @item.CreationDate.ToShortDateString()</small><br />
                                    <div class="btn-group" role="group" aria-label="Basic outlined example">
                                        <button @onclick="(()=> OpenModalHandler(CRUDState.Read, item))" class="btn btn-outline-secondary"><span class="oi oi-eye"></span></button>
                                        <button @onclick="(()=> OpenModalHandler(CRUDState.Update, item))" class="btn btn-outline-primary"><span class="oi oi-pencil"></span></button>
                                        <button @onclick="(()=> OpenModalHandler(CRUDState.Delete, item))" class="btn btn-outline-danger"><span class="oi oi-trash"></span></button>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
            else if (filteredListForView?.Count() == 0)
            {
                <div class="alert alert-info text-center">
                    Notes not found ...
                </div>
            }
            else
            {
                <div class="alert alert-info text-center">
                    Loading your notes ...
                </div>
            }

            @if (crudAction == CRUDState.Create)
            {
                <NotesASPBlazorTask.Pages.User.CreateNoteModal OnCancelCreation="(() => crudAction = CRUDState.None)" OnNoteCreation="CreateNoteAsync" UserId="@userId" />
            }
            @if (crudAction == CRUDState.Read)
            {
                <NotesASPBlazorTask.Pages.User.ViewNoteModal OnCancelReading="(() => crudAction = CRUDState.None)" Note="noteObject" />
            }
            @if (crudAction == CRUDState.Update)
            {
                <NotesASPBlazorTask.Pages.User.EditNoteModal NoteForEditing="noteObject" OnCancelEditing="(()=> crudAction = CRUDState.None)" OnNoteEditing="EditNoteHandler" />
            }
            @if (crudAction == CRUDState.Delete)
            {
                <NotesASPBlazorTask.Pages.User.DeleteNoteModal NoteForDeleting="noteObject" OnCancelDeleting="(()=> crudAction = CRUDState.None)" OnNoteDelete="DeleteNoteHandler" />
            }
        </div>
        @if (userNotes is not null)
        {
            <div class="row mb-5 justify-content-between">
                <div class="col-6 m-auto">
                    <Pagination Items="userNotes" PageSize="6" OnPagedList="ShowPagedListHandler" @ref="refPagination" />
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col text-center">
                <h1>Welcome to the personal note manager application</h1>
                <h5>Please, register account first or login to start to using service.</h5>
            </div>
        </div>
        <div class="row justify-content-between mt-5">
            @if (demoNotes is not null)
            {
                <div class="sticker">
                    <ul class="text-center mb-5">
                        @foreach (var item in demoNotes)
                        {
                            <li>
                                <h2>@item.Title</h2>
                                <p>@item.Body</p>
                                <div class="text-center">
                                    <small>Created: @item.CreationDate.ToShortDateString()</small><br />
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<Note> userNotes;
    IEnumerable<Note> demoNotes;
    IEnumerable<Note> filteredListForView;
    Note? noteObject;
    Message? resultMessage = null;
    string userId = string.Empty;
    string searchCondition = string.Empty;

    Pagination refPagination;
    CRUDState crudAction = CRUDState.None;

    protected override async Task OnInitializedAsync()
    {
        var authStateProv = (CustomeAuthStateProvider)_authState;
        var state = await authStateProv.GetAuthenticationStateAsync();


        if (state.User.Identity.IsAuthenticated)
        {
            userId = state.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
            if (!string.IsNullOrWhiteSpace(userId))
                userNotes = await _noteService.GetAllNotesAsync(userId);
            return;
        }
        else
            demoNotes = _noteService.GetDemoNotieces();
    }

    async Task CreateNoteAsync(Note createdNote)
    {
        crudAction = CRUDState.None;

        Message result = await _noteService.CreateNoteAsync(createdNote);

        if (result.State == MessageState.Success)
            userNotes = await _noteService.GetAllNotesAsync(userId);

        resultMessage = result;
    }

    async Task EditNoteHandler(Note note)
    {
        crudAction = CRUDState.None;
        Message result = await _noteService.UpdateNoteAsync(note);

        if (result.State == MessageState.Success)
            userNotes = await _noteService.GetAllNotesAsync(userId);

        resultMessage = result;
    }

    async Task DeleteNoteHandler(Note noteForDeleting)
    {
        crudAction = CRUDState.None;
        Message result = await _noteService.DeleteNoteAsync(noteForDeleting);

        if (result.State == MessageState.Success)
            userNotes = await _noteService.GetAllNotesAsync(userId);

        resultMessage = result;
    }

    void OpenModalHandler(CRUDState action, Note? note = null)
    {
        switch (action)
        {
            case CRUDState.Create:
                noteObject = new();
                crudAction = action;
                break;

            case CRUDState.Read:
                noteObject = note;
                crudAction = action;
                break;

            case CRUDState.Update:
                noteObject = note;
                crudAction = action;
                break;

            case CRUDState.Delete:
                noteObject = note;
                crudAction = action;
                break;
        }
    }

    async Task SearchHandler(string searchConditions)
    {
        if (string.IsNullOrWhiteSpace(searchConditions))
        {
            userNotes = await _noteService.GetAllNotesAsync(userId);
            refPagination.HandleListUpdated(userNotes);
            return;
        }

        var notes = await _noteService.GetNotesByCondition(searchConditions, userId);
        userNotes = notes.ToList();
        refPagination.HandleListUpdated(userNotes);
    }

    private void ShowPagedListHandler(IEnumerable<Note> filteredList) 
    {
        filteredListForView = filteredList;
        StateHasChanged();
    }
}