@page "/"

@inject INoteService _noteService
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage _sessionStorage
@inject AuthenticationStateProvider _authState

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="row border border-info rounded align-items-center">
            <div class="col">
                <h1 class="text-info">Notes Dashboard</h1>
            </div>
            <div class="col text-end">
                @if (!isProcessing)
                {
                    <button class="btn btn-primary text-uppercase" @onclick="(() => isCreating = !isCreating)">Create note</button>
                }
                else
                {
                    <button class="btn btn-primary text-uppercase" disabled>Wait</button>
                }

            </div>
        </div>

        @if (resultMessage is not null)
        {
            <div class="row mt-3">
                <div class="alert alert-@((resultMessage.State == MessageState.Success) ? "success" : "danger") alert-dismissible fade show" role="alert">
                    @resultMessage.MessageText
                    @{
                        resultMessage = null;
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        }

        <div class="row mt-3">
            @if (userNotes is not null && userNotes.Any())
            {
                @foreach (var item in userNotes)
                {
                    <div class="col-sm-12 col-md-3">
                        <div class="card text-center">
                            <div class="card-header stickerBg">
                                <h3>@item.Title.GetShortDescription(100, false)</h3>
                            </div>
                            <div class="card-body stickerBg">
                                <p class="card-text">@item.Body.GetShortDescription(30)</p>
                            </div>
                            <div class="card-footer text-muted stickerBg">
                                <small>Created: @item.CreationDate.ToShortDateString()</small><br />
                                <div class="btn-group" role="group" aria-label="Basic outlined example">
                                    <a href="#" class="btn btn-outline-secondary"><span class="oi oi-eye"></span></a>
                                    <a href="#" class="btn btn-outline-primary"><span class="oi oi-pencil"></span></a>
                                    <a href="#" class="btn btn-outline-danger"><span class="oi oi-trash"></span></a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info text-center">
                    Notes not found ...
                </div>
            }
            @if (isCreating)
            {
                <NotesASPBlazorTask.Pages.User.CreateNoteModal OnCancelCreation="(() => isCreating = !isCreating )" OnNoteCreation="CreateNoteAsync" />
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col text-center">
                <h1>Welcome to the personal note manager application</h1>
                <h5>Please, register account first or login to start to using service.</h5>
            </div>
        </div>
        <div class="row justify-content-between mt-5">
            <div class="col-sm-12 col-md-5">
                <NotesASPBlazorTask.Pages.Authentication.Login />
            </div>
            <div class="col-sm-12 mt-3 col-md-6 mt-md-0">
                <NotesASPBlazorTask.Pages.Authentication.Registration />
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    IEnumerable<Note> userNotes;
    Message? resultMessage = null;
    bool isProcessing = false;
    bool isCreating = false;
    bool isUpdating = false;
    string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authStateProv = (CustomeAuthStateProvider)_authState;
        var state = await authStateProv.GetAuthenticationStateAsync();


        if (state.User.Identity.IsAuthenticated)
        {
            userId = state.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
            if (!string.IsNullOrWhiteSpace(userId))
                userNotes = await _noteService.GetAllNotesAsync(userId);
        }
    }

    async Task CreateNoteAsync(Note createdNote)
    {
        isProcessing = true;
        isCreating = false;
        var result = await _noteService.CreateNoteAsync(createdNote);

        if (result.State == MessageState.Success)
        {
            resultMessage = result;
            userNotes = await _noteService.GetAllNotesAsync(userId);
        }
        else if (result.State == MessageState.Failed)
            resultMessage = result;

        isProcessing = false;
    }
}